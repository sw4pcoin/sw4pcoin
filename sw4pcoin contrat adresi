// SPDX-License-Identifier: MIT
pragma solidity ^0.5.16;

contract Sw4pCoin {
    string public name = "Sw4pCoin";
    string public symbol = "Sw4p";
    uint8 public decimals = 18; // Ondalık kısmı 18
    uint256 public totalSupply = 10000000000000 * (10 ** uint256(decimals)); // Toplam arz: 10,000,000,000,000 token

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    constructor() public {
        owner = msg.sender; // Sözleşmenin sahibi deploy eden adres
        balanceOf[owner] = totalSupply; // İlk arz, deploy eden adrese verilir
        emit Transfer(address(0), owner, totalSupply);
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function mint(uint256 _amount) public onlyOwner {
        uint256 scaledAmount = _amount * (10 ** uint256(decimals));
        totalSupply += scaledAmount;
        balanceOf[owner] += scaledAmount;
        emit Transfer(address(0), owner, scaledAmount);
    }

    function burn(uint256 _amount) public {
        uint256 scaledAmount = _amount * (10 ** uint256(decimals));
        require(balanceOf[msg.sender] >= scaledAmount, "Insufficient balance to burn");
        totalSupply -= scaledAmount;
        balanceOf[msg.sender] -= scaledAmount;
        emit Transfer(msg.sender, address(0), scaledAmount);
    }
}
